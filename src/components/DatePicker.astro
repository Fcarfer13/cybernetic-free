---
interface Props {
  events: Array<{
    title: string;
    date: string;
  }>;
}

const { events } = Astro.props;

const currentDate = new Date();
const currentMonth = currentDate.getMonth();
const currentYear = currentDate.getFullYear();

// Función para obtener el primer día del mes
const getFirstDayOfMonth = (year: number, month: number) => {
  const firstDay = new Date(year, month, 1);
  let day = firstDay.getDay();
  // Convertimos domingo (0) a 7 para mantener la secuencia lunes-domingo
  if (day === 0) day = 7;
  return day - 1; // Restamos 1 para que el lunes sea 0
};

// Función para obtener el número de días en el mes
const getDaysInMonth = (year: number, month: number) => {
  return new Date(year, month + 1, 0).getDate();
};

// Función para generar los días del mes
const generateDays = (year: number, month: number) => {
  const daysInMonth = getDaysInMonth(year, month);
  const firstDay = getFirstDayOfMonth(year, month);
  const days = [];

  // Agregar días vacíos al principio si el mes no empieza en lunes
  for (let i = 0; i < firstDay; i++) {
    days.push({ day: '', isCurrentMonth: false });
  }

  // Agregar los días del mes
  for (let i = 1; i <= daysInMonth; i++) {
    const date = new Date(year, month, i);
    const dateString = date.toISOString().split('T')[0];
    const hasEvent = events.some(event => event.date === dateString);
    days.push({
      day: i,
      isCurrentMonth: true,
      isToday: i === currentDate.getDate() && month === currentMonth && year === currentYear,
      hasEvent,
      date: dateString
    });
  }

  return days;
};

// Función para obtener el nombre del mes
const getMonthName = (month: number) => {
  const months = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];
  return months[month];
};

// Función para obtener los nombres de los días de la semana
const getWeekDays = () => {
  return ['Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb', 'Dom'];
};

const days = generateDays(currentYear, currentMonth);
const weekDays = getWeekDays();
---

<div class="calendar">
  <div class="calendar-header">
    <button class="nav-button prev" type="button" aria-label="Mes anterior">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M15 18l-6-6 6-6"/>
      </svg>
    </button>
    <h2>{getMonthName(currentMonth)} {currentYear}</h2>
    <button class="nav-button next" type="button" aria-label="Mes siguiente">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M9 18l6-6-6-6"/>
      </svg>
    </button>
  </div>

  <div class="week-days">
    {weekDays.map(day => (
      <div class="week-day">{day}</div>
    ))}
  </div>

  <div class="days-grid">
    {days.map((day, index) => (
      <div
        class={`day ${day.isCurrentMonth ? 'current-month' : ''} ${day.isToday ? 'today' : ''} ${day.hasEvent ? 'has-event' : ''}`}
        data-date={day.date}
      >
        {day.day}
        {day.hasEvent && <span class="event-dot"></span>}
      </div>
    ))}
  </div>
</div>

<style>
  .calendar {
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    width: 100%;
    min-width: 300px;
  }

  .calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .calendar-header h2 {
    margin: 0;
    font-size: 1.25rem;
    color: #333;
  }

  .nav-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    color: #666;
    transition: color 0.2s ease;
  }

  .nav-button:hover {
    color: #333;
  }

  .week-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .week-day {
    text-align: center;
    font-size: 0.875rem;
    color: #666;
    font-weight: 500;
  }

  .days-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
  }

  .day {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    color: #666;
    cursor: pointer;
    position: relative;
    transition: all 0.2s ease;
  }

  .day.current-month {
    color: #333;
  }

  .day.today {
    background-color: #f0f0f0;
    font-weight: 600;
  }

  .day.has-event::after {
    content: '';
    position: absolute;
    bottom: 0.25rem;
    width: 0.25rem;
    height: 0.25rem;
    background-color: #353461;
    border-radius: 50%;
  }

  .day:hover {
    background-color: #f5f5f5;
  }

  .day.selected {
    background-color: #353461;
    color: white;
  }

  @media (max-width: 480px) {
    .calendar {
      padding: 0.75rem;
    }

    .calendar-header h2 {
      font-size: 1.1rem;
    }

    .week-day {
      font-size: 0.8rem;
    }

    .day {
      font-size: 0.8rem;
    }
  }
</style>

<script>
  const days = document.querySelectorAll('.day');
  const selectedDateInput = document.getElementById('selectedDate') as HTMLInputElement;

  days.forEach(day => {
    day.addEventListener('click', () => {
      // Remover la clase selected de todos los días
      days.forEach(d => d.classList.remove('selected'));
      
      // Agregar la clase selected al día clickeado
      day.classList.add('selected');
      
      // Actualizar el input hidden con la fecha seleccionada
      if (selectedDateInput) {
        selectedDateInput.value = day.getAttribute('data-date') || '';
      }
    });
  });
</script> 